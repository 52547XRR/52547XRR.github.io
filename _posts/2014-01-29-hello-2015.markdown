---
layout: post
title: "这是我接管这个模板并建站后的第一篇文章23333333"
subtitle: " \"Hello World, Hello Blog\""
date: 2025-03-16 12:00:00
author: "xr_日计划"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
  - Meta
---

> “Yeah It's on. ”

“Hux 的 Blog 就这么开通了。”
这是大佬的模板中的第一句话，同时你可以看见许多的大佬的原帖，先就保留一下把。

[跳过废话，直接看技术实现](#build) 

这是来自原本的模板的主人黄玄大佬在接近十年之前写下的第一篇blog，我今天将其fork了下来进行了我的个人站的搭建，并利用他的第一篇blog来作为自己的第一篇blog的模板，也算是一种致敬了吧，貌似这位大佬是做前端出身的，而我目前还没有好好的确定自己的技术栈到底要走什么方向，目前也是在坚定的刷洛谷与力扣中，不久也要开始自己的数分学习了，记录一下把。

<p id="build"></p>

## 这是我决定用C++进行造轮子并记录的第一天，也不一定进行日更，看我的学习进度把。

### 1. GCD（最大公约数）的计算

#### 1.1 递归实现

`gcd(a, b)`（最大公约数）的递归定义如下：

```cpp
int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}
2. STL 中的搜索函数
C++ STL 提供了多种搜索算法，其中 std::find 和 std::find_if 非常常见。

2.1 std::find
cpp
复制
编辑
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> v = {1, 3, 5, 7, 9};
    auto it = std::find(v.begin(), v.end(), 5);
    if (it != v.end()) {
        std::cout << "Found: " << *it << std::endl;
    } else {
        std::cout << "Not found" << std::endl;
    }
}
特点：

适用于 vector、list、array 等容器。
时间复杂度：O(n)。
2.2 std::find_if
使用 find_if 查找满足条件的元素：

cpp
复制
编辑
auto it = std::find_if(v.begin(), v.end(), [](int x) { return x > 5; });
特点：

传入 lambda 表达式，查找符合条件的元素。
2.3 std::find_if_not
用于查找第一个不符合条件的元素：

cpp
复制
编辑
auto it = std::find_if_not(v.begin(), v.end(), [](int x) { return x % 2 == 0; });
2.4 std::search
用于查找子序列：

cpp
复制
编辑
std::vector<int> v1 = {1, 2, 3, 4, 5, 6};
std::vector<int> v2 = {3, 4};
auto it = std::search(v1.begin(), v1.end(), v2.begin(), v2.end());
若 it != v1.end()，则找到了匹配的子序列。

3. size_t 的特点与注意事项
size_t 是 无符号整数，常用于索引、长度等场景：

cpp
复制
编辑
size_t len = vec.size(); // 推荐
3.1 size_t 和 int 的区别
类型	特性	适用场景
int	有符号，可能为负	普通计算
size_t	无符号，只能是非负数	数组索引、sizeof 计算
3.2 size_t 的潜在坑
① size_t 和 int 比较
cpp
复制
编辑
size_t a = 5;
int b = -1;
if (a > b) {  // 可能出现逻辑错误
    std::cout << "size_t 5 > int -1!" << std::endl;
}
原因：

b 被隐式转换为 无符号数，变成一个非常大的数（UINT_MAX - 1）。
避免用 size_t 和 int 混合比较！
② size_t 减法可能导致溢出
cpp
复制
编辑
size_t a = 0;
a--;  // 变成了最大值，不会变成负数！
std::cout << a << std::endl;  // 输出一个很大的数
解决方案：

使用 ssize_t（有符号版本） 避免溢出。
在逻辑判断前，检查 size_t 是否为 0。
